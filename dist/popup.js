!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=4)}([function(t,e,n){var r=function(t){"use strict";var e=Object.prototype,n=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function c(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,n){return t[e]=n}}function u(t,e,n,r){var o=e&&e.prototype instanceof d?e:d,i=Object.create(o.prototype),a=new E(r||[]);return i._invoke=function(t,e,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return j()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var c=b(a,n);if(c){if(c===s)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=l(t,e,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===s)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}(t,n,a),i}function l(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var s={};function d(){}function f(){}function p(){}var h={};h[o]=function(){return this};var v=Object.getPrototypeOf,y=v&&v(v(S([])));y&&y!==e&&n.call(y,o)&&(h=y);var m=p.prototype=d.prototype=Object.create(h);function g(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function w(t,e){var r;this._invoke=function(o,i){function a(){return new e((function(r,a){!function r(o,i,a,c){var u=l(t[o],t,i);if("throw"!==u.type){var s=u.arg,d=s.value;return d&&"object"==typeof d&&n.call(d,"__await")?e.resolve(d.__await).then((function(t){r("next",t,a,c)}),(function(t){r("throw",t,a,c)})):e.resolve(d).then((function(t){s.value=t,a(s)}),(function(t){return r("throw",t,a,c)}))}c(u.arg)}(o,i,r,a)}))}return r=r?r.then(a,a):a()}}function b(t,e){var n=t.iterator[e.method];if(void 0===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,b(t,e),"throw"===e.method))return s;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return s}var r=l(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,s;var o=r.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,s):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,s)}function O(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function x(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function E(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function S(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(n.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:j}}function j(){return{value:void 0,done:!0}}return f.prototype=m.constructor=p,p.constructor=f,f.displayName=c(p,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===f||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,c(t,a,"GeneratorFunction")),t.prototype=Object.create(m),t},t.awrap=function(t){return{__await:t}},g(w.prototype),w.prototype[i]=function(){return this},t.AsyncIterator=w,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new w(u(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},g(m),c(m,a,"Generator"),m[o]=function(){return this},m.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=S,E.prototype={constructor:E,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(n,r){return a.type="throw",a.arg=t,e.next=n,r&&(e.method="next",e.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,s):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),s},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),x(n),s}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;x(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:S(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=void 0),s}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,e,n){"use strict";function r(t,e){try{return JSON.parse(t)}catch(t){return e}}function o(t){return("00"+t).slice(-2)}n.d(e,"b",(function(){return r})),n.d(e,"a",(function(){return o}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});
/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */
var r=e.saveAs=window.saveAs||function(t){if("undefined"==typeof navigator||!/MSIE [1-9]\./.test(navigator.userAgent)){var e=t.document,n=function(){return t.URL||t.webkitURL||t},r=e.createElementNS("http://www.w3.org/1999/xhtml","a"),o="download"in r,i=/Version\/[\d\.]+.*Safari/.test(navigator.userAgent),a=t.webkitRequestFileSystem,c=t.requestFileSystem||a||t.mozRequestFileSystem,u=function(e){(t.setImmediate||t.setTimeout)((function(){throw e}),0)},l=0,s=function(t){setTimeout((function(){"string"==typeof t?n().revokeObjectURL(t):t.remove()}),4e4)},d=function(t,e,n){for(var r=(e=[].concat(e)).length;r--;){var o=t["on"+e[r]];if("function"==typeof o)try{o.call(t,n||t)}catch(t){u(t)}}},f=function(t){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t},p=function e(u,p,h){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),h||(u=f(u));var v,y,m,g=this,w=u.type,b=!1,O=function(){d(g,"writestart progress write writeend".split(" "))},x=function(){if(y&&i&&"undefined"!=typeof FileReader){var e=new FileReader;return e.onloadend=function(){var t=e.result;y.location.href="data:attachment/file"+t.slice(t.search(/[,;]/)),g.readyState=g.DONE,O()},e.readAsDataURL(u),void(g.readyState=g.INIT)}(!b&&v||(v=n().createObjectURL(u)),y)?y.location.href=v:void 0===t.open(v,"_blank")&&i&&(t.location.href=v);g.readyState=g.DONE,O(),s(v)},E=function(t){return function(){if(g.readyState!==g.DONE)return t.apply(this,arguments)}},S={create:!0,exclusive:!1};if(g.readyState=g.INIT,p||(p="download"),o)return v=n().createObjectURL(u),void setTimeout((function(){var t,e;r.href=v,r.download=p,t=r,e=new MouseEvent("click"),t.dispatchEvent(e),O(),s(v),g.readyState=g.DONE}));t.chrome&&w&&"application/octet-stream"!==w&&(m=u.slice||u.webkitSlice,u=m.call(u,0,u.size,"application/octet-stream"),b=!0),a&&"download"!==p&&(p+=".download"),("application/octet-stream"===w||a)&&(y=t),c?(l+=u.size,c(t.TEMPORARY,l,E((function(t){t.root.getDirectory("saved",S,E((function(t){var e=function(){t.getFile(p,S,E((function(t){t.createWriter(E((function(e){e.onwriteend=function(e){y.location.href=t.toURL(),g.readyState=g.DONE,d(g,"writeend",e),s(t)},e.onerror=function(){var t=e.error;t.code!==t.ABORT_ERR&&x()},"writestart progress write abort".split(" ").forEach((function(t){e["on"+t]=g["on"+t]})),e.write(u),g.abort=function(){e.abort(),g.readyState=g.DONE},g.readyState=g.WRITING})),x)})),x)};t.getFile(p,{create:!1},E((function(t){t.remove(),e()})),E((function(t){t.code===t.NOT_FOUND_ERR?e():x()})))})),x)})),x)):x()},h=p.prototype;return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(t,e,n){return n||(t=f(t)),navigator.msSaveOrOpenBlob(t,e||"download")}:(h.abort=function(){this.readyState=this.DONE,d(this,"abort")},h.readyState=h.INIT=0,h.WRITING=1,h.DONE=2,h.error=h.onwritestart=h.onprogress=h.onwrite=h.onabort=h.onerror=h.onwriteend=null,function(t,e,n){return new p(t,e,n)})}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||(void 0).content);e.default=r},function(t,e,n){"use strict";n.d(e,"f",(function(){return y})),n.d(e,"g",(function(){return g})),n.d(e,"b",(function(){return w})),n.d(e,"d",(function(){return O})),n.d(e,"e",(function(){return E})),n.d(e,"a",(function(){return j})),n.d(e,"c",(function(){return T}));var r=n(1);function o(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return i(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){u(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function u(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e,n,r,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void n(t)}c.done?e(u):Promise.resolve(u).then(r,o)}function s(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){l(i,r,o,a,c,"next",t)}function c(t){l(i,r,o,a,c,"throw",t)}a(void 0)}))}}var d=((t,e,n)=>{let r=(2<<Math.log(t.length-1)/Math.LN2)-1,o=-~(1.6*r*e/t.length);return()=>{let i="";for(;;){let a=n(o),c=o;for(;c--;)if(i+=t[a[c]&r]||"",i.length===e)return i}}})("ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW",10,t=>crypto.getRandomValues(new Uint8Array(t))),f="sync",p="local";function h(t,e){return new Promise((function(n){return chrome.storage[t].get(e,n)}))}function v(t,e){return new Promise((function(n){return chrome.storage[t].set(e,n)}))}function y(){return m.apply(this,arguments)}function m(){return(m=s(regeneratorRuntime.mark((function t(){var e;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,h(f,{sources:'["sources-1"]'});case 2:return e=t.sent,t.abrupt("return",Object(r.b)(e,["sources-1"]).reduce((function(t,e){return Promise.all([t,h(f,u({},e,"[]"))]).then((function(t){var n=o(t,2),i=n[0],a=n[1];return i.concat(Object(r.b)(a[e],[]))}))}),Promise.resolve([])));case 4:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function g(t){for(var e=[],n={},r=1;r<=Math.max(1,Math.ceil(t.length/20));r++){var o="sources-".concat(r);e.push(o),n[o]=JSON.stringify(t.slice(20*(r-1),20*r))}return n.registry=JSON.stringify(e),v(f,n)}function w(t){return b.apply(this,arguments)}function b(){return(b=s(regeneratorRuntime.mark((function t(e){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,y();case 2:return(n=t.sent).push(c(c({},e),{},{id:d()})),t.next=6,g(n);case 6:return t.abrupt("return",n);case 7:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function O(t){return x.apply(this,arguments)}function x(){return(x=s(regeneratorRuntime.mark((function t(e){var n,r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,y();case 2:return n=t.sent,r=n.filter((function(t){return(null==t?void 0:t.id)!==e})),t.next=6,g(r);case 6:return t.abrupt("return",r);case 7:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function E(){return S.apply(this,arguments)}function S(){return(S=s(regeneratorRuntime.mark((function t(){var e,n,i,a,c,u,l,s,d,v,y,m;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,h(f,{hiddenChapters:"{}",hide:Date.now()});case 2:return e=t.sent,n=e.hiddenChapters,i=e.hide,t.next=7,h(p,{urls:"[]"});case 7:return a=t.sent,c=a.urls,u=Object(r.b)(n,{}),l=Object(r.b)(c,[]),s=function(t){return!!(i&&t.created<i||u[t.id])},d=Object.values(l).sort((function(t,e){var n=e.created-t.created;return Math.abs(n)<500?String(t).localeCompare(e):n})).reduce((function(t,e){var n=o(t,2),r=n[0],i=n[1];return s(e)?r.push(e):i.push(e),[r,i]}),[[],[]]),v=o(d,2),y=v[0],m=v[1],t.abrupt("return",{oldUrls:y,newUrls:m});case 14:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function j(t){return k.apply(this,arguments)}function k(){return(k=s(regeneratorRuntime.mark((function t(e){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=r.b,t.next=3,h(f,{hiddenChapters:"{}"});case 3:return t.t1=t.sent,t.t2={},(n=(0,t.t0)(t.t1,t.t2))[e]=!0,t.abrupt("return",v(f,{hiddenChapters:JSON.stringify(n)}));case 8:case"end":return t.stop()}}),t)})))).apply(this,arguments)}var I,L,T=(L=[],function(t){I||(I=setTimeout(s(regeneratorRuntime.mark((function t(){var e,n,o,i,a;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=L,L=[],I=void 0,t.next=5,h(p,{urls:"{}"});case 5:n=t.sent,o=n.urls,i=Object(r.b)(o,{}),a=c({},i),e.forEach((function(t){a[t.url]=c(c({},t),{},{id:d()})})),Object.keys(a)>Object.keys(i)&&v(p,{urls:JSON.stringify(a)});case 11:case"end":return t.stop()}}),t)}))),100)),L.push(t)})},function(t,e,n){"use strict";n.r(e);var r=n(0),o=n.n(r),i=n(1),a=n(3);function c(t,e,n,r,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void n(t)}c.done?e(u):Promise.resolve(u).then(r,o)}var u=null,l=document.getElementById("bookmark"),s=document.getElementById("bookmark-track"),d=document.getElementById("bookmark-hide"),f=document.getElementById("bookmark-title"),p=document.getElementById("title"),h=document.getElementById("url"),v=document.getElementById("mangaId");function y(){var t,e,n,r,o,i,a,c,u,l,s,d,f,p,h,v,y,m,g,w,b;var O=[null===(t=window)||void 0===t||null===(e=t.manga)||void 0===e?void 0:e.manga_id,null===(n=document.querySelector(".rating-post-id"))||void 0===n?void 0:n.value,null===(r=document.querySelector(".wp-manga-action-button"))||void 0===r||null===(o=r.dataset)||void 0===o?void 0:o.post,null===(i=document.querySelector(".chapter-selection"))||void 0===i||null===(a=i.dataset)||void 0===a?void 0:a.manga,null===(c=document.getElementById("manga-chapters-holder"))||void 0===c||null===(u=c.dataset)||void 0===u?void 0:u.id,null===(l=document.getElementById("manga-reading-nav-head"))||void 0===l||null===(s=l.dataset)||void 0===s?void 0:s.id,null===(d=document.getElementById("manga-reading-nav-foot"))||void 0===d||null===(f=d.dataset)||void 0===f?void 0:f.id,null===(p=document.querySelector("link[rel=shortlink]"))||void 0===p||null===(h=p.href)||void 0===h?void 0:h.split("?p=")[1]].filter((function(t){return t})).reduce((function(t,e){return t[e]="number"==typeof t[e]?t[e]+1:1,t}),{}),x=Object.keys(O).sort((function(t,e){return O[t]-O[e]}))[0],E=[Array.from(document.querySelectorAll('script[type="application/ld+json"]')).map((function(t){var e;return null===(e=function(t,e){try{return JSON.parse(t)}catch(t){return e}}(t.innerText))||void 0===e?void 0:e.headline})).find((function(t){return t})),null===(v=document.getElementById("chapter-heading"))||void 0===v||null===(y=v.innerText)||void 0===y?void 0:y.split(" - ")[0],null===(m=document.querySelector(".post-title h1"))||void 0===m?void 0:m.innerText,null===(g=document.querySelector(".rate-title"))||void 0===g?void 0:g.title].filter((function(t){return t})).reduce((function(t,e){return t[e]="number"==typeof t[e]?t[e]+1:1,t}),{}),S=Object.keys(E).sort((function(t,e){return E[t]-E[e]}))[0];chrome.runtime.sendMessage({id:x,title:S,url:null!==(w=document)&&void 0!==w&&null!==(b=w.location)&&void 0!==b&&b.origin?"".concat(document.location.origin,"/wp-admin/admin-ajax.php"):null})}d.addEventListener("click",(function(){l.style.display="none",f.innerText="",u=null})),s.addEventListener("click",(function(){l.style.display="none",f.innerText="",Object(a.b)(u),u=null})),chrome.runtime.onMessage.addListener(function(){var t,e=(t=regeneratorRuntime.mark((function t(e){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(e.id&&e.title&&e.url)){t.next=12;break}return t.next=3,Object(a.f)();case 3:if(t.sent.some((function(t){return t.url===e.url&&String(t.mangaId)===String(e.id)}))){t.next=12;break}return l.style.display="flex",f.innerText='Do you want to start tracking "'.concat(e.title,'"?'),u={mangaId:e.id,title:e.title,url:e.url},p.value=u.title,h.value=u.url,v.value=u.mangaId,t.abrupt("return");case 12:p.value="",h.value="",v.value="",l.style.display="none",f.innerText="",u=null;case 18:case"end":return t.stop()}}),t)})),function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){c(i,r,o,a,u,"next",t)}function u(t){c(i,r,o,a,u,"throw",t)}a(void 0)}))});return function(t){return e.apply(this,arguments)}}());var m=n(2),g=n.n(m),w=document.getElementById("import"),b=document.getElementById("export");function O(t,e,n,r,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void n(t)}c.done?e(u):Promise.resolve(u).then(r,o)}function x(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){O(i,r,o,a,c,"next",t)}function c(t){O(i,r,o,a,c,"throw",t)}a(void 0)}))}}w.addEventListener("change",(function(t){var e=t.target.files[0],n=new FileReader;n.addEventListener("load",(function(){var t=Object(i.b)(n.result,[]).filter((function(t){return(null==t?void 0:t.title)&&t.url&&t.mangaId}));t.length&&Object(a.g)(t),w.files=null})),n.readAsText(e)})),b.addEventListener("click",(function(){Object(a.f)().then((function(t){var e=new Blob([JSON.stringify(t)],{type:"application/json"});g()(e,"mangapoll.json")}))}));var E=document.getElementById("hide"),S=document.getElementById("popupTitle"),j=document.getElementById("add"),k=document.getElementById("addSection"),I=document.getElementById("urls"),L=document.getElementById("title"),T=document.getElementById("url"),R=document.getElementById("mangaId"),P=document.getElementById("submitSource"),N=document.getElementById("sources"),_=25;function M(){return B.apply(this,arguments)}function B(){return(B=x(o.a.mark((function t(){var e;return o.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,a.f();case 2:e=t.sent,N.innerHTML=e.sort((function(t,e){return String(t.title).localeCompare(null==e?void 0:e.title)})).map((function(t){return'<li class="row source">\n                <div class="data">\n                    <span class="title">'.concat(t.title,'</span>\n                    <span class="manga-id">(<b>Manga-Id</b>: ').concat(t.mangaId,')</span>\n                    <span class="url" title="').concat(t.url,'"><b>Url</b>: ').concat(t.url,'</span>\n                </div>\n                <span class="delete action" data-id="').concat(t.id,'">Delete</span>\n            </li>')})).join("\n");case 4:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function D(t){return function(e){var n=new Date(e.created),r=String(e.url).match(/\/[^\/]*hapter[^\/\d]*(\d*)[^\d\/]*[^\/]*\//)||[],o="".concat(Object(i.a)(n.getHours()),":").concat(Object(i.a)(n.getMinutes())),a="".concat(Object(i.a)(n.getDate()),".").concat(Object(i.a)(n.getMonth()+1),".").concat(String(n.getFullYear()).slice(-2)),c=n.toISOString().split("T")[0]===(new Date).toISOString().split("T")[0]?o:a;return'\n            <li class="row'.concat(t?" old":" new",'">\n                <a class="link" href="').concat(e.url,'" target="_blank" rel="noopener" data-id="').concat(e.id,'">\n                    ').concat(e.title," - Chapter ").concat(r[1],'\n                </a>\n                <span class="date-wrapper">\n                <span class="date">').concat(c,'</span>\n                <span class="hide" data-id="').concat(e.id,'">Hide</span>\n                </span>\n            </li>')}}function A(){return C.apply(this,arguments)}function C(){return(C=x(o.a.mark((function t(){var e,n,r,i,c;return o.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,a.e();case 2:e=t.sent,n=e.newUrls,r=e.oldUrls,i=n.map(D(!1)),c=r.map(D(!0)),i.length||c.length?(I.innerHTML=i.concat('<li class="old-chapters">Old Chapters</li>').concat(c.slice(0,_)).concat(c.length>_?['<li class="action load-more">Load '.concat(Math.min(_,c.length-_)," more old chapters...</li>")]:[]).join("\n"),document.title=i.length?"(".concat(i.length,") Manga Poll"):"Manga Poll"):(I.innerHTML='<li class="row">No Chapters available.</li>',document.title="Manga Poll");case 8:case"end":return t.stop()}}),t)})))).apply(this,arguments)}E.addEventListener("click",(function(){chrome.storage.sync.set({hide:Date.now(),hiddenChapters:"{}"})})),I.addEventListener("click",function(){var t=x(o.a.mark((function t(e){var n,r,i;return o.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if((n=e.target.closest(".row .hide"))&&n.dataset.id&&I.contains(n)&&a.a(n.dataset.id),!((r=e.target.closest(".row.new .link"))&&r.dataset.id&&I.contains(r))){t.next=8;break}return e.preventDefault(),t.next=7,a.a(r.dataset.id);case 7:window.open(r.href,"_blank");case 8:(i=e.target.closest(".action.load-more"))&&I.contains(i)&&(_+=_,A());case 10:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),N.addEventListener("click",(function(t){var e=t.target.closest(".row .action.delete");e&&e.dataset.id&&N.contains(e)&&(a.d(e.dataset.id),e.classList.remove("action"))})),j.addEventListener("click",(function(){"flex"!==k.style.display?(k.style.display="flex",N.style.display="block",I.style.display="none",E.style.display="none",S.innerText="Manga Settings",j.innerText="Chapters",N.innerHTML='<li class="row" style="text-align: center;">...loading</li>',M()):(k.style.display="none",N.style.display="none",I.style.display="",j.innerText="Manga Settings",E.style.display="",S.innerText="Chapters")})),P.addEventListener("click",(function(){L.value&&T.value&&R.value&&(P.disabled=!0,a.b({title:L.value,url:T.value,mangaId:R.value}).then((function(){L.value="",T.value="",R.value="",P.disabled=!1})))})),chrome.storage.onChanged.addListener((function(t){["hide","hiddenChapters","urls"].some(t.hasOwnProperty.bind(t))&&A(),Object.keys(t).some((function(t){return t.includes("sources")}))&&M()})),A(),M().then((function(){chrome.tabs.query({active:!0,windowId:chrome.windows.WINDOW_ID_CURRENT},(function(t){t[0].url.includes("chrome://")||chrome.scripting.executeScript({target:{tabId:t[0].id},function:y})}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,